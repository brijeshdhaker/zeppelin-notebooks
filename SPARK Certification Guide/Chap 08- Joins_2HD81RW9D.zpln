{
  "paragraphs": [
    {
      "text": "%md\n###### Join Expressions:\n* Join brings two datasets together by comparing by comparing the value of one or more keys of the left and right and evaluating the result of a join expression\n* Join expression determines whether Spark should bring together the left set of data with the right set of data.\n* an **equi-join expression**, compares whether the specified keys in your left and right datasets are equal.\n* Spark also allows for much more sophsticated join policies in addition to equi-joins. We can even use **complex types and perform something like checking whether a key exists within an array when you perform a join.**",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:24:11.451",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eJoin Expressions:\u003c/h6\u003e\n\u003cul\u003e\n  \u003cli\u003eJoin brings two datasets together by comparing by comparing the value of one or more keys of the left and right and evaluating the result of a join expression\u003c/li\u003e\n  \u003cli\u003eJoin expression determines whether Spark should bring together the left set of data with the right set of data.\u003c/li\u003e\n  \u003cli\u003ean \u003cstrong\u003eequi-join expression\u003c/strong\u003e, compares whether the specified keys in your left and right datasets are equal.\u003c/li\u003e\n  \u003cli\u003eSpark also allows for much more sophsticated join policies in addition to equi-joins. We can even use \u003cstrong\u003ecomplex types and perform something like checking whether a key exists within an array when you perform a join.\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529669_286645016",
      "id": "20220919-163849_978843647",
      "dateCreated": "2022-09-19 16:38:49.669",
      "status": "READY"
    },
    {
      "text": "%md\n###### Join Types:\njoin type determines what should be in the result set. There are a variety of different join types available in Spark\n\n* Inner Joins - Keep rows with keys that exist in the left and right datasets\n* Outter Joins - Keep rows with keys in either the left or right datasets\n* Left Outer Joins - Keep rows with keys in the left dataset\n* Right Outer Joins - Keep rows with keys in the right dataset\n* Left Semi Join - Keep the rows in the left, and only the left, dataset where the key appears in the right dataset.\n* Left anti Join - keep the rows in the left, and only the left, dataset where they do not appear in the right dataset.\n* Natural joins - Perform a join by implicitly matching the columns between the two datasets with the same names.\n* Cross (or Cartesian) joins - Match every row in the left dataset with every row in the right dataset.\n\nlet’s create some simple datasets to understand more with examples.",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:25:32.135",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eJoin Types:\u003c/h6\u003e\n\u003cp\u003ejoin type determines what should be in the result set. There are a variety of different join types available in Spark\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eInner Joins - Keep rows with keys that exist in the left and right datasets\u003c/li\u003e\n  \u003cli\u003eOutter Joins - Keep rows with keys in either the left or right datasets\u003c/li\u003e\n  \u003cli\u003eLeft Outer Joins - Keep rows with keys in the left dataset\u003c/li\u003e\n  \u003cli\u003eRight Outer Joins - Keep rows with keys in the right dataset\u003c/li\u003e\n  \u003cli\u003eLeft Semi Join - Keep the rows in the left, and only the left, dataset where the key appears in the right dataset.\u003c/li\u003e\n  \u003cli\u003eLeft anti Join - keep the rows in the left, and only the left, dataset where they do not appear in the right dataset.\u003c/li\u003e\n  \u003cli\u003eNatural joins - Perform a join by implicitly matching the columns between the two datasets with the same names.\u003c/li\u003e\n  \u003cli\u003eCross (or Cartesian) joins - Match every row in the left dataset with every row in the right dataset.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003elet’s create some simple datasets to understand more with examples.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_131058102",
      "id": "20220919-163849_325266457",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\nperson \u003d spark.createDataFrame([\n        (0, \"Bill Chambers\", 0, [100]),\n        (1, \"Matei Zaharia\", 1, [500, 250, 100]),\n        (2, \"Michael Armbrust\", 1, [250, 100])])\\\n        .toDF(\"id\", \"name\", \"graduate_program\", \"spark_status\")\n\ngraduateProgram \u003d spark.createDataFrame([\n          (0, \"Masters\", \"School of Information\", \"UC Berkeley\"),\n          (2, \"Masters\", \"EECS\", \"UC Berkeley\"),\n          (1, \"Ph.D.\", \"EECS\", \"UC Berkeley\")])\\\n          .toDF(\"id\", \"degree\", \"department\", \"school\")\n\nsparkStatus \u003d spark.createDataFrame([\n              (500, \"Vice President\"),\n              (250, \"PMC Member\"),\n              (100, \"Contributor\")])\\\n              .toDF(\"id\", \"status\")",
      "user": "anonymous",
      "dateUpdated": "2022-11-30 00:56:30.331",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "colWidth": 12.0,
        "fontSize": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_157042544",
      "id": "20220919-163849_1774440423",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\nperson.createOrReplaceTempView(\"person\")\ngraduateProgram.createOrReplaceTempView(\"graduateProgram\")\nsparkStatus.createOrReplaceTempView(\"sparkStatus\")\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-30 00:56:55.106",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "colWidth": 12.0,
        "fontSize": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_1352277787",
      "id": "20220919-163849_1275343974",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\nperson.show()\ngraduateProgram.show()\nsparkStatus.show()\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-30 00:56:46.452",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "colWidth": 12.0,
        "fontSize": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+----------------+----------------+---------------+\n id|            name|graduate_program|   spark_status|\n+---+----------------+----------------+---------------+\n  0|   Bill Chambers|               0|          [100]|\n  1|   Matei Zaharia|               1|[500, 250, 100]|\n  2|Michael Armbrust|               1|     [250, 100]|\n+---+----------------+----------------+---------------+\n\n+---+-------+--------------------+-----------+\n id| degree|          department|     school|\n+---+-------+--------------------+-----------+\n  0|Masters|School of Informa...|UC Berkeley|\n  2|Masters|                EECS|UC Berkeley|\n  1|  Ph.D.|                EECS|UC Berkeley|\n+---+-------+--------------------+-----------+\n\n+---+--------------+\n id|        status|\n+---+--------------+\n500|Vice President|\n250|    PMC Member|\n100|   Contributor|\n+---+--------------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_687896267",
      "id": "20220919-163849_1174328556",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%md\n###### Inner Joins:\nInner joins evaluate the keys in both of the DataFrames or tables and include (and join together) only the rows that evaluate to true.\n\nEg: we join the graduateProgram DataFrame with the person DataFrame to create a new DataFrame",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:27:34.006",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eInner Joins:\u003c/h6\u003e\n\u003cp\u003eInner joins evaluate the keys in both of the DataFrames or tables and include (and join together) only the rows that evaluate to true.\u003c/p\u003e\n\u003cp\u003eEg: we join the graduateProgram DataFrame with the person DataFrame to create a new DataFrame\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_1984175015",
      "id": "20220919-163849_193450926",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\njoinExpression \u003d person[\"graduate_program\"] \u003d\u003d graduateProgram[\"id\"]",
      "user": "anonymous",
      "dateUpdated": "2022-11-30 00:57:01.533",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "colWidth": 12.0,
        "fontSize": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_220650779",
      "id": "20220919-163849_2093779406",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\nwrongJoinExpression \u003d person[\"name\"] \u003d\u003d graduateProgram[\"school\"]",
      "user": "anonymous",
      "dateUpdated": "2022-11-30 00:57:04.587",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "colWidth": 12.0,
        "fontSize": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_1457408912",
      "id": "20220919-163849_285615413",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%md\nInner joins are the default join, so we just need to specify our left DataFrame and join the right in the JOIN expression:",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:28:42.302",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eInner joins are the default join, so we just need to specify our left DataFrame and join the right in the JOIN expression:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_1748865282",
      "id": "20220919-163849_585943629",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\nperson.join(graduateProgram, joinExpression).show()\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-30 00:57:24.908",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "colWidth": 12.0,
        "fontSize": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+----------------+----------------+---------------+---+-------+--------------------+-----------+\n id|            name|graduate_program|   spark_status| id| degree|          department|     school|\n+---+----------------+----------------+---------------+---+-------+--------------------+-----------+\n  0|   Bill Chambers|               0|          [100]|  0|Masters|School of Informa...|UC Berkeley|\n  1|   Matei Zaharia|               1|[500, 250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\n  2|Michael Armbrust|               1|     [250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\n+---+----------------+----------------+---------------+---+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_1418822142",
      "id": "20220919-163849_390293277",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\njoinType \u003d \"inner\"\nperson.join(graduateProgram, joinExpression, joinType).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.670",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+----------------+----------------+---------------+---+-------+--------------------+-----------+\n id|            name|graduate_program|   spark_status| id| degree|          department|     school|\n+---+----------------+----------------+---------------+---+-------+--------------------+-----------+\n  0|   Bill Chambers|               0|          [100]|  0|Masters|School of Informa...|UC Berkeley|\n  1|   Matei Zaharia|               1|[500, 250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\n  2|Michael Armbrust|               1|     [250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\n+---+----------------+----------------+---------------+---+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_1563032369",
      "id": "20220919-163849_265887426",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\n%sql\nSELECT * FROM person INNER JOIN graduateProgram ON person.graduate_program \u003d graduateProgram.id",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.670",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n\u003c/style\u003e\u003cdiv class\u003d\u0027table-result-container\u0027\u003e\u003ctable class\u003d\u0027table-result\u0027\u003e\u003cthead style\u003d\u0027background-color: white\u0027\u003e\u003ctr\u003e\u003cth\u003eid\u003c/th\u003e\u003cth\u003ename\u003c/th\u003e\u003cth\u003egraduate_program\u003c/th\u003e\u003cth\u003espark_status\u003c/th\u003e\u003cth\u003eid\u003c/th\u003e\u003cth\u003edegree\u003c/th\u003e\u003cth\u003edepartment\u003c/th\u003e\u003cth\u003eschool\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e0\u003c/td\u003e\u003ctd\u003eBill Chambers\u003c/td\u003e\u003ctd\u003e0\u003c/td\u003e\u003ctd\u003eList(100)\u003c/td\u003e\u003ctd\u003e0\u003c/td\u003e\u003ctd\u003eMasters\u003c/td\u003e\u003ctd\u003eSchool of Information\u003c/td\u003e\u003ctd\u003eUC Berkeley\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003eMatei Zaharia\u003c/td\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003eList(500, 250, 100)\u003c/td\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003ePh.D.\u003c/td\u003e\u003ctd\u003eEECS\u003c/td\u003e\u003ctd\u003eUC Berkeley\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003ctd\u003eMichael Armbrust\u003c/td\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003eList(250, 100)\u003c/td\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003ePh.D.\u003c/td\u003e\u003ctd\u003eEECS\u003c/td\u003e\u003ctd\u003eUC Berkeley\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_293992311",
      "id": "20220919-163849_802602369",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%md\n###### Outer Join:\n* Outer joins evaluate the keys in both of the DataFrames or tables and includes (and joins together) the rows that evaluate to true or false. \n* If there is no equivalent row in either the left or right DataFrame, Spark will insert null",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:34:11.961",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eOuter Join:\u003c/h6\u003e\n\u003cul\u003e\n  \u003cli\u003eOuter joins evaluate the keys in both of the DataFrames or tables and includes (and joins together) the rows that evaluate to true or false.\u003c/li\u003e\n  \u003cli\u003eIf there is no equivalent row in either the left or right DataFrame, Spark will insert null\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_1158475945",
      "id": "20220919-163849_1806476436",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\njoinType \u003d \"outer\"\nperson.join(graduateProgram, joinExpression, joinType).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.670",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+----+----------------+----------------+---------------+---+-------+--------------------+-----------+\n  id|            name|graduate_program|   spark_status| id| degree|          department|     school|\n+----+----------------+----------------+---------------+---+-------+--------------------+-----------+\n   0|   Bill Chambers|               0|          [100]|  0|Masters|School of Informa...|UC Berkeley|\n   1|   Matei Zaharia|               1|[500, 250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\n   2|Michael Armbrust|               1|     [250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\nnull|            null|            null|           null|  2|Masters|                EECS|UC Berkeley|\n+----+----------------+----------------+---------------+---+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_405993119",
      "id": "20220919-163849_1687682565",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%md\n###### Left Outer Joins:\n* Left outer joins evaluate the keys in both of the DataFrames or tables and includes all rows from the left DataFrame as well as any rows in the right DataFrame that have a match in the left DataFrame.\n* If there is no equivalent row in the right DataFrame, Spark will insert null",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:35:48.918",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eLeft Outer Joins:\u003c/h6\u003e\n\u003cul\u003e\n  \u003cli\u003eLeft outer joins evaluate the keys in both of the DataFrames or tables and includes all rows from the left DataFrame as well as any rows in the right DataFrame that have a match in the left DataFrame.\u003c/li\u003e\n  \u003cli\u003eIf there is no equivalent row in the right DataFrame, Spark will insert null\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_1052639782",
      "id": "20220919-163849_204905961",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\njoinType \u003d \"left_outer\"\ngraduateProgram.join(person, joinExpression, joinType).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.670",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+-------+--------------------+-----------+----+----------------+----------------+---------------+\n id| degree|          department|     school|  id|            name|graduate_program|   spark_status|\n+---+-------+--------------------+-----------+----+----------------+----------------+---------------+\n  0|Masters|School of Informa...|UC Berkeley|   0|   Bill Chambers|               0|          [100]|\n  1|  Ph.D.|                EECS|UC Berkeley|   1|   Matei Zaharia|               1|[500, 250, 100]|\n  1|  Ph.D.|                EECS|UC Berkeley|   2|Michael Armbrust|               1|     [250, 100]|\n  2|Masters|                EECS|UC Berkeley|null|            null|            null|           null|\n+---+-------+--------------------+-----------+----+----------------+----------------+---------------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_947049173",
      "id": "20220919-163849_1637438691",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%md\n###### Right Outer Joins:\n* Right outer joins evaluate the keys in both of the DataFrames or tables and includes all rows from the right DataFrame as well as any rows in the left DataFrame that have a match in the right DataFrame.\n* If there is no equivalent row in the left DataFrame, Spark will insert null",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:38:36.547",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eRight Outer Joins:\u003c/h6\u003e\n\u003cul\u003e\n  \u003cli\u003eRight outer joins evaluate the keys in both of the DataFrames or tables and includes all rows from the right DataFrame as well as any rows in the left DataFrame that have a match in the right DataFrame.\u003c/li\u003e\n  \u003cli\u003eIf there is no equivalent row in the left DataFrame, Spark will insert null\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_191290473",
      "id": "20220919-163849_1458292000",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\njoinType \u003d \"right_outer\"\nperson.join(graduateProgram, joinExpression, joinType).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.670",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+----+----------------+----------------+---------------+---+-------+--------------------+-----------+\n  id|            name|graduate_program|   spark_status| id| degree|          department|     school|\n+----+----------------+----------------+---------------+---+-------+--------------------+-----------+\n   0|   Bill Chambers|               0|          [100]|  0|Masters|School of Informa...|UC Berkeley|\n   1|   Matei Zaharia|               1|[500, 250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\n   2|Michael Armbrust|               1|     [250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\nnull|            null|            null|           null|  2|Masters|                EECS|UC Berkeley|\n+----+----------------+----------------+---------------+---+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_922348741",
      "id": "20220919-163849_1134778746",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%md\n###### Left Semi Join:\n* This join actually include doesnt any values from the right DataFrame.\n* They only compare to see if value exists in second dataframe.\n* If the value does exist, those rows will be kept in the result, even if there are duplicate keys in the left DataFrame.",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.670",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eLeft Semi Join:\u003c/h6\u003e\n\u003cul\u003e\n  \u003cli\u003eThis join actually include doesnt any values from the right DataFrame.\u003c/li\u003e\n  \u003cli\u003eThey only compare to see if value exists in second dataframe.\u003c/li\u003e\n  \u003cli\u003eIf the value does exist, those rows will be kept in the result, even if there are duplicate keys in the left DataFrame.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529670_486661239",
      "id": "20220919-163849_697903550",
      "dateCreated": "2022-09-19 16:38:49.670",
      "status": "READY"
    },
    {
      "text": "%pyspark\njoinType \u003d \"left_semi\"\ngraduateProgram.join(person, joinExpression, joinType).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+-------+--------------------+-----------+\n id| degree|          department|     school|\n+---+-------+--------------------+-----------+\n  0|Masters|School of Informa...|UC Berkeley|\n  1|  Ph.D.|                EECS|UC Berkeley|\n+---+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529671_1707821451",
      "id": "20220919-163849_1004865684",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%pyspark\n#Adding duplicate row to check how the duplicate works\n\ngradProgram2 \u003d graduateProgram.union(spark.createDataFrame([\n                      (0, \"Masters\", \"Duplicated Row\", \"Duplicated School\")]))\n\ngradProgram2.createOrReplaceTempView(\"gradProgram2\")\ngradProgram2.join(person, joinExpression, joinType).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+-------+--------------------+-----------------+---+----------------+----------------+---------------+\n id| degree|          department|           school| id|            name|graduate_program|   spark_status|\n+---+-------+--------------------+-----------------+---+----------------+----------------+---------------+\n  0|Masters|School of Informa...|      UC Berkeley|  0|   Bill Chambers|               0|          [100]|\n  0|Masters|      Duplicated Row|Duplicated School|  0|   Bill Chambers|               0|          [100]|\n  1|  Ph.D.|                EECS|      UC Berkeley|  1|   Matei Zaharia|               1|[500, 250, 100]|\n  1|  Ph.D.|                EECS|      UC Berkeley|  2|Michael Armbrust|               1|     [250, 100]|\n+---+-------+--------------------+-----------------+---+----------------+----------------+---------------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_1602989837",
      "id": "20220919-163849_1200432003",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%md\n###### Left Anti Joins:\n* This join is exactly opposite to Left Semi Join.\n* This also compare values to see if the value exists in the second DataFrame. However, rather than keeping the values that exist in the second DataFrame, they keep only the values that do not have a corresponding key in the second DataFrame.\n* Think of anti joins as a NOT IN SQL-style filter",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:47:29.829",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eLeft Anti Joins:\u003c/h6\u003e\n\u003cul\u003e\n  \u003cli\u003eThis join is exactly opposite to Left Semi Join.\u003c/li\u003e\n  \u003cli\u003eThis also compare values to see if the value exists in the second DataFrame. However, rather than keeping the values that exist in the second DataFrame, they keep only the values that do not have a corresponding key in the second DataFrame.\u003c/li\u003e\n  \u003cli\u003eThink of anti joins as a NOT IN SQL-style filter\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_365349069",
      "id": "20220919-163849_515689089",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%pyspark\njoinType \u003d \"left_anti\"\ngraduateProgram.join(person, joinExpression, joinType).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+-------+----------+-----------+\n id| degree|department|     school|\n+---+-------+----------+-----------+\n  2|Masters|      EECS|UC Berkeley|\n+---+-------+----------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_1819875735",
      "id": "20220919-163849_275003252",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%md\n###### Cross (Cartesian) Joins:\n* Cross joins will join every single row in the left DataFrame to ever single row in the right DataFrame.\n* This will cause an absolute explosion in the number of rows contained in the resulting DataFrame.",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:52:12.431",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eCross (Cartesian) Joins:\u003c/h6\u003e\n\u003cul\u003e\n  \u003cli\u003eCross joins will join every single row in the left DataFrame to ever single row in the right DataFrame.\u003c/li\u003e\n  \u003cli\u003eThis will cause an absolute explosion in the number of rows contained in the resulting DataFrame.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_1727783802",
      "id": "20220919-163849_803664093",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%pyspark\njoinType \u003d \"cross\"\ngraduateProgram.join(person, joinExpression, joinType).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+-------+--------------------+-----------+---+----------------+----------------+---------------+\n id| degree|          department|     school| id|            name|graduate_program|   spark_status|\n+---+-------+--------------------+-----------+---+----------------+----------------+---------------+\n  0|Masters|School of Informa...|UC Berkeley|  0|   Bill Chambers|               0|          [100]|\n  1|  Ph.D.|                EECS|UC Berkeley|  1|   Matei Zaharia|               1|[500, 250, 100]|\n  1|  Ph.D.|                EECS|UC Berkeley|  2|Michael Armbrust|               1|     [250, 100]|\n+---+-------+--------------------+-----------+---+----------------+----------------+---------------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_1805747857",
      "id": "20220919-163849_2043966150",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%pyspark\nperson.crossJoin(graduateProgram).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+----------------+----------------+---------------+---+-------+--------------------+-----------+\n id|            name|graduate_program|   spark_status| id| degree|          department|     school|\n+---+----------------+----------------+---------------+---+-------+--------------------+-----------+\n  0|   Bill Chambers|               0|          [100]|  0|Masters|School of Informa...|UC Berkeley|\n  0|   Bill Chambers|               0|          [100]|  2|Masters|                EECS|UC Berkeley|\n  0|   Bill Chambers|               0|          [100]|  1|  Ph.D.|                EECS|UC Berkeley|\n  1|   Matei Zaharia|               1|[500, 250, 100]|  0|Masters|School of Informa...|UC Berkeley|\n  1|   Matei Zaharia|               1|[500, 250, 100]|  2|Masters|                EECS|UC Berkeley|\n  1|   Matei Zaharia|               1|[500, 250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\n  2|Michael Armbrust|               1|     [250, 100]|  0|Masters|School of Informa...|UC Berkeley|\n  2|Michael Armbrust|               1|     [250, 100]|  2|Masters|                EECS|UC Berkeley|\n  2|Michael Armbrust|               1|     [250, 100]|  1|  Ph.D.|                EECS|UC Berkeley|\n+---+----------------+----------------+---------------+---+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_963519956",
      "id": "20220919-163849_910883888",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%md\n* You should use cross-joins only if you are absolutely, 100 percent sure that this is the join you need.Reason being we need to be explicit when defining a cross-join in Spark.\n\n* Advanced users can set the session-level configuration **spark.sql.crossJoin.enable** to true in order to allow cross-joins without warnings or without Spark trying to perform another join for you.",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:55:08.774",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\n  \u003cp\u003eYou should use cross-joins only if you are absolutely, 100 percent sure that this is the join you need.Reason being we need to be explicit when defining a cross-join in Spark.\u003c/p\u003e\u003c/li\u003e\n  \u003cli\u003e\n  \u003cp\u003eAdvanced users can set the session-level configuration \u003cstrong\u003espark.sql.crossJoin.enable\u003c/strong\u003e to true in order to allow cross-joins without warnings or without Spark trying to perform another join for you.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_1984384556",
      "id": "20220919-163849_128229914",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%md\n###### Challenges When Using Joins:\n**Joining Complex Types:**\n* Any expression is a valid join expression, assuming that it returns a Boolean",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:55:34.028",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eChallenges When Using Joins:\u003c/h6\u003e\n\u003cp\u003e\u003cstrong\u003eJoining Complex Types:\u003c/strong\u003e\u003cbr/\u003e* Any expression is a valid join expression, assuming that it returns a Boolean\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_821994430",
      "id": "20220919-163849_716866306",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql.functions import expr\n\nperson.withColumnRenamed(\"id\", \"personId\").join(sparkStatus, expr(\"array_contains(spark_status, id)\")).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+--------+----------------+----------------+---------------+---+--------------+\npersonId|            name|graduate_program|   spark_status| id|        status|\n+--------+----------------+----------------+---------------+---+--------------+\n       0|   Bill Chambers|               0|          [100]|100|   Contributor|\n       1|   Matei Zaharia|               1|[500, 250, 100]|500|Vice President|\n       1|   Matei Zaharia|               1|[500, 250, 100]|250|    PMC Member|\n       1|   Matei Zaharia|               1|[500, 250, 100]|100|   Contributor|\n       2|Michael Armbrust|               1|     [250, 100]|250|    PMC Member|\n       2|Michael Armbrust|               1|     [250, 100]|100|   Contributor|\n+--------+----------------+----------------+---------------+---+--------------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_1820356388",
      "id": "20220919-163849_1467387126",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%md\n**Handling Duplicate Column Names:**\n\n* In a DataFrame, each column has a unique ID within Spark’s SQL Engine,Catalyst. This unique ID is purely internal and not something that you can directly reference. \n* Duplicate column names occur in two distinct situations:\n  * The Join expression that you specify does not remove one key from one of the input DataFrames and the keys have the same column name.\n  * Two columns on which we are not performing the join have the same name..",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:57:15.332",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cstrong\u003eHandling Duplicate Column Names:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eIn a DataFrame, each column has a unique ID within Spark’s SQL Engine,Catalyst. This unique ID is purely internal and not something that you can directly reference.\u003c/li\u003e\n  \u003cli\u003eDuplicate column names occur in two distinct situations:\u003c/li\u003e\n  \u003cli\u003eThe Join expression that you specify does not remove one key from one of the input DataFrames and the keys have the same column name.\u003c/li\u003e\n  \u003cli\u003eTwo columns on which we are not performing the join have the same name..\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_1965373956",
      "id": "20220919-163849_1832181103",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%pyspark\nperson.show()\ngraduateProgram.show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+----------------+----------------+---------------+\n id|            name|graduate_program|   spark_status|\n+---+----------------+----------------+---------------+\n  0|   Bill Chambers|               0|          [100]|\n  1|   Matei Zaharia|               1|[500, 250, 100]|\n  2|Michael Armbrust|               1|     [250, 100]|\n+---+----------------+----------------+---------------+\n\n+---+-------+--------------------+-----------+\n id| degree|          department|     school|\n+---+-------+--------------------+-----------+\n  0|Masters|School of Informa...|UC Berkeley|\n  2|Masters|                EECS|UC Berkeley|\n  1|  Ph.D.|                EECS|UC Berkeley|\n+---+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_47907643",
      "id": "20220919-163849_924432877",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%pyspark\ngradProgramDupe \u003d graduateProgram.withColumnRenamed(\"id\", \"graduate_program\")\njoinExpr \u003d gradProgramDupe[\"graduate_program\"] \u003d\u003d person[\"graduate_program\"]\n\n#joinExpression \u003d person[\"graduate_program\"] \u003d\u003d graduateProgram[\"id\"]",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_443487147",
      "id": "20220919-163849_620778730",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%pyspark\nperson.join(gradProgramDupe, joinExpr).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+----------------+----------------+---------------+----------------+-------+--------------------+-----------+\n id|            name|graduate_program|   spark_status|graduate_program| degree|          department|     school|\n+---+----------------+----------------+---------------+----------------+-------+--------------------+-----------+\n  0|   Bill Chambers|               0|          [100]|               0|Masters|School of Informa...|UC Berkeley|\n  1|   Matei Zaharia|               1|[500, 250, 100]|               1|  Ph.D.|                EECS|UC Berkeley|\n  2|Michael Armbrust|               1|     [250, 100]|               1|  Ph.D.|                EECS|UC Berkeley|\n+---+----------------+----------------+---------------+----------------+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_2144526510",
      "id": "20220919-163849_1441245432",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%md\nThe challenge arises when we refer to one of these columns",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 02:59:35.863",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe challenge arises when we refer to one of these columns\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_352525488",
      "id": "20220919-163849_705530989",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%pyspark\nperson.join(gradProgramDupe, joinExpr).select(\"graduate_program\").show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.672",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e\u003c/div\u003e"
          },
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e\u003cspan class\u003d\"ansired\"\u003e---------------------------------------------------------------------------\u003c/span\u003e\n\u003cspan class\u003d\"ansired\"\u003eAnalysisException\u003c/span\u003e                         Traceback (most recent call last)\n\u003cspan class\u003d\"ansigreen\"\u003e\u0026lt;command-2458856584082544\u0026gt;\u003c/span\u003e in \u003cspan class\u003d\"ansicyan\"\u003e\u0026lt;module\u0026gt;\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003e()\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e----\u0026gt; 1\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e \u003c/span\u003eperson\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003ejoin\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003egradProgramDupe\u003cspan class\u003d\"ansiyellow\"\u003e,\u003c/span\u003e joinExpr\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003eselect\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003e\u0026quot;graduate_program\u0026quot;\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003eshow\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\n\u003cspan class\u003d\"ansigreen\"\u003e/databricks/spark/python/pyspark/sql/dataframe.py\u003c/span\u003e in \u003cspan class\u003d\"ansicyan\"\u003eselect\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003e(self, *cols)\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e   1343\u003c/span\u003e         \u003cspan class\u003d\"ansiyellow\"\u003e[\u003c/span\u003eRow\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003ename\u003cspan class\u003d\"ansiyellow\"\u003e\u003d\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003eu\u0026apos;Alice\u0026apos;\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e,\u003c/span\u003e age\u003cspan class\u003d\"ansiyellow\"\u003e\u003d\u003c/span\u003e\u003cspan class\u003d\"ansicyan\"\u003e12\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e,\u003c/span\u003e Row\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003ename\u003cspan class\u003d\"ansiyellow\"\u003e\u003d\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003eu\u0026apos;Bob\u0026apos;\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e,\u003c/span\u003e age\u003cspan class\u003d\"ansiyellow\"\u003e\u003d\u003c/span\u003e\u003cspan class\u003d\"ansicyan\"\u003e15\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e]\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e   1344\u003c/span\u003e         \u0026quot;\u0026quot;\u0026quot;\n\u003cspan class\u003d\"ansigreen\"\u003e-\u0026gt; 1345\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e         \u003c/span\u003ejdf \u003cspan class\u003d\"ansiyellow\"\u003e\u003d\u003c/span\u003e self\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003e_jdf\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003eselect\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003eself\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003e_jcols\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e*\u003c/span\u003ecols\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e   1346\u003c/span\u003e         \u003cspan class\u003d\"ansigreen\"\u003ereturn\u003c/span\u003e DataFrame\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003ejdf\u003cspan class\u003d\"ansiyellow\"\u003e,\u003c/span\u003e self\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003esql_ctx\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e   1347\u003c/span\u003e \u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\n\u003cspan class\u003d\"ansigreen\"\u003e/databricks/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u003c/span\u003e in \u003cspan class\u003d\"ansicyan\"\u003e__call__\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003e(self, *args)\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e   1255\u003c/span\u003e         answer \u003cspan class\u003d\"ansiyellow\"\u003e\u003d\u003c/span\u003e self\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003egateway_client\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003esend_command\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003ecommand\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e   1256\u003c/span\u003e         return_value \u003d get_return_value(\n\u003cspan class\u003d\"ansigreen\"\u003e-\u0026gt; 1257\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e             answer, self.gateway_client, self.target_id, self.name)\n\u003c/span\u003e\u003cspan class\u003d\"ansigreen\"\u003e   1258\u003c/span\u003e \u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e   1259\u003c/span\u003e         \u003cspan class\u003d\"ansigreen\"\u003efor\u003c/span\u003e temp_arg \u003cspan class\u003d\"ansigreen\"\u003ein\u003c/span\u003e temp_args\u003cspan class\u003d\"ansiyellow\"\u003e:\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\n\u003cspan class\u003d\"ansigreen\"\u003e/databricks/spark/python/pyspark/sql/utils.py\u003c/span\u003e in \u003cspan class\u003d\"ansicyan\"\u003edeco\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003e(*a, **kw)\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e     67\u003c/span\u003e                                              e.java_exception.getStackTrace()))\n\u003cspan class\u003d\"ansigreen\"\u003e     68\u003c/span\u003e             \u003cspan class\u003d\"ansigreen\"\u003eif\u003c/span\u003e s\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003estartswith\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003e\u0026apos;org.apache.spark.sql.AnalysisException: \u0026apos;\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e:\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e---\u0026gt; 69\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e                 \u003c/span\u003e\u003cspan class\u003d\"ansigreen\"\u003eraise\u003c/span\u003e AnalysisException\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003es\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003esplit\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003e\u0026apos;: \u0026apos;\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e,\u003c/span\u003e \u003cspan class\u003d\"ansicyan\"\u003e1\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e[\u003c/span\u003e\u003cspan class\u003d\"ansicyan\"\u003e1\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e]\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e,\u003c/span\u003e stackTrace\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e     70\u003c/span\u003e             \u003cspan class\u003d\"ansigreen\"\u003eif\u003c/span\u003e s\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003estartswith\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003e\u0026apos;org.apache.spark.sql.catalyst.analysis\u0026apos;\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e:\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\u003cspan class\u003d\"ansigreen\"\u003e     71\u003c/span\u003e                 \u003cspan class\u003d\"ansigreen\"\u003eraise\u003c/span\u003e AnalysisException\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003es\u003cspan class\u003d\"ansiyellow\"\u003e.\u003c/span\u003esplit\u003cspan class\u003d\"ansiyellow\"\u003e(\u003c/span\u003e\u003cspan class\u003d\"ansiblue\"\u003e\u0026apos;: \u0026apos;\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e,\u003c/span\u003e \u003cspan class\u003d\"ansicyan\"\u003e1\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e[\u003c/span\u003e\u003cspan class\u003d\"ansicyan\"\u003e1\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e]\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e,\u003c/span\u003e stackTrace\u003cspan class\u003d\"ansiyellow\"\u003e)\u003c/span\u003e\u003cspan class\u003d\"ansiyellow\"\u003e\u003c/span\u003e\n\n\u003cspan class\u003d\"ansired\"\u003eAnalysisException\u003c/span\u003e: \u0026quot;Reference \u0026apos;graduate_program\u0026apos; is ambiguous, could be: graduate_program, graduate_program.;\u0026quot;\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529672_81299267",
      "id": "20220919-163849_1352769040",
      "dateCreated": "2022-09-19 16:38:49.672",
      "status": "READY"
    },
    {
      "text": "%md\n**Approach 1: Different join expression**\nThe easiest fix is to change the join expression from a Boolean expression to a string or sequence. This automatically removes one of\nthe columns for you during the join",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 03:00:26.419",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cstrong\u003eApproach 1: Different join expression\u003c/strong\u003e\u003cbr/\u003eThe easiest fix is to change the join expression from a Boolean expression to a string or sequence. This automatically removes one of\u003cbr/\u003ethe columns for you during the join\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_1430449246",
      "id": "20220919-163849_2007050218",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%pyspark\nperson.join(gradProgramDupe,\"graduate_program\").show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.673",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+----------------+---+----------------+---------------+-------+--------------------+-----------+\ngraduate_program| id|            name|   spark_status| degree|          department|     school|\n+----------------+---+----------------+---------------+-------+--------------------+-----------+\n               0|  0|   Bill Chambers|          [100]|Masters|School of Informa...|UC Berkeley|\n               1|  1|   Matei Zaharia|[500, 250, 100]|  Ph.D.|                EECS|UC Berkeley|\n               1|  2|Michael Armbrust|     [250, 100]|  Ph.D.|                EECS|UC Berkeley|\n+----------------+---+----------------+---------------+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_581624117",
      "id": "20220919-163849_527032718",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%pyspark\nperson.join(gradProgramDupe,\"graduate_program\").select(\"graduate_program\").show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.673",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+----------------+\ngraduate_program|\n+----------------+\n               0|\n               1|\n               1|\n+----------------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_893119036",
      "id": "20220919-163849_1505847530",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%md\n**Approach 2: Dropping the column after the join**\n* When doing this, we need to refer to the column via the original source DataFrame.\n* We can do this if the join uses the same key names or if the source DataFrames have columns that simply have the same name",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 03:01:46.148",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cstrong\u003eApproach 2: Dropping the column after the join\u003c/strong\u003e\u003cbr/\u003e* When doing this, we need to refer to the column via the original source DataFrame.\u003cbr/\u003e* We can do this if the join uses the same key names or if the source DataFrames have columns that simply have the same name\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_1885050926",
      "id": "20220919-163849_88882396",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%pyspark\nperson.join(gradProgramDupe, joinExpr).drop(person[\"graduate_program\"]).select(\"graduate_program\").show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.673",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+----------------+\ngraduate_program|\n+----------------+\n               0|\n               1|\n               1|\n+----------------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_467234450",
      "id": "20220919-163849_507122280",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%md\nThis is an artifact of Spark’s SQL analysis process in which an explicitly referenced column will pass analysis because Spark has no need to resolve the column.",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.673",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThis is an artifact of Spark’s SQL analysis process in which an explicitly referenced column will pass analysis because Spark has no need to resolve the column.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_997455328",
      "id": "20220919-163849_1762437805",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%md\n**Approach 3: Renaming a column before the join:**\n\nWe can avoid this issue altogether if we rename one of our columns before the join",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 03:03:37.349",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cstrong\u003eApproach 3: Renaming a column before the join:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWe can avoid this issue altogether if we rename one of our columns before the join\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_1212352097",
      "id": "20220919-163849_83777511",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%pyspark\ngradProgram3 \u003d graduateProgram.withColumnRenamed(\"id\", \"grad_id\")\njoinExpr \u003d person[\"graduate_program\"] \u003d\u003d gradProgram3[\"grad_id\"]\nperson.join(gradProgram3, joinExpr).show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.673",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e+---+----------------+----------------+---------------+-------+-------+--------------------+-----------+\n id|            name|graduate_program|   spark_status|grad_id| degree|          department|     school|\n+---+----------------+----------------+---------------+-------+-------+--------------------+-----------+\n  0|   Bill Chambers|               0|          [100]|      0|Masters|School of Informa...|UC Berkeley|\n  1|   Matei Zaharia|               1|[500, 250, 100]|      1|  Ph.D.|                EECS|UC Berkeley|\n  2|Michael Armbrust|               1|     [250, 100]|      1|  Ph.D.|                EECS|UC Berkeley|\n+---+----------------+----------------+---------------+-------+-------+--------------------+-----------+\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_795125622",
      "id": "20220919-163849_1171906670",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%md\n###### How Spark Performs Joins:\nTo understand how Spark performs joins, we need to understand the two core resources at play:\n* node-to-node communication strategy\n* per node computation stratergy\n\nSpark approaches cluster communication in two different ways during joins. It either incurs a\n* shuffle join, which results in an all-to-all communication. When you join a big table to another big table, you end up with a shuffle join. \n* a broadcast join\n\nThe core foundation of simplified view of joins is that in Spark we will have either a **big table** or a **small table.**",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 03:04:13.965",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eHow Spark Performs Joins:\u003c/h6\u003e\n\u003cp\u003eTo understand how Spark performs joins, we need to understand the two core resources at play:\u003cbr/\u003e* node-to-node communication strategy\u003cbr/\u003e* per node computation stratergy\u003c/p\u003e\n\u003cp\u003eSpark approaches cluster communication in two different ways during joins. It either incurs a\u003cbr/\u003e* shuffle join, which results in an all-to-all communication. When you join a big table to another big table, you end up with a shuffle join.\u003cbr/\u003e* a broadcast join\u003c/p\u003e\n\u003cp\u003eThe core foundation of simplified view of joins is that in Spark we will have either a \u003cstrong\u003ebig table\u003c/strong\u003e or a \u003cstrong\u003esmall table.\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_1167474413",
      "id": "20220919-163849_1888695785",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%md\n**Big table to Big table:**\n* when you join big table to big table, we end up in **Shuffle Join**\n* In Shuffle join, every node talks to other node and they share data according to which node has a certain key or set of keys(on which you are joining).\n* These joins are expensive because the network can be become congested with traffic, especially when the data is not partitioned well.\n\n![Big table to Bigtable](files/tables/Bigtable_to_bigtable-44cdf.PNG)",
      "user": "anonymous",
      "dateUpdated": "2022-11-30 00:55:07.809",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 12.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cstrong\u003eBig table to Big table:\u003c/strong\u003e\u003cbr/\u003e* when you join big table to big table, we end up in \u003cstrong\u003eShuffle Join\u003c/strong\u003e\u003cbr/\u003e* In Shuffle join, every node talks to other node and they share data according to which node has a certain key or set of keys(on which you are joining).\u003cbr/\u003e* These joins are expensive because the network can be become congested with traffic, especially when the data is not partitioned well.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"files/tables/Bigtable_to_bigtable-44cdf.PNG\" alt\u003d\"Big table to Bigtable\" /\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_1163289554",
      "id": "20220919-163849_1946233940",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%md\n**Big table–to–small table:**\n* This uses Broadcast Join.\n* When the table is small enough to fit into the memory of a single worker node, with some breathing room of course, we can optimize our join.\n* replicate our small DataFrame onto every worker node in the cluster (be it located on one machine or many).\n* Even it looks expensive initially, but this prevents us from performing the all-to-all communication during the entire join process.\n* we perform it only once at the beginning and then let each individual worker node perform the work without having to wait or communicate with any other worker node.\n* This means that joins will be performed on every single node individually, making CPU the biggest bottleneck.\n\n![Broad Cast Join](files/tables/BroadCast_Join-1b827.PNG)\n\nFor our current set of data, we can see that Spark joining type by looking at the explain plan:",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 03:05:14.445",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cstrong\u003eBig table–to–small table:\u003c/strong\u003e\u003cbr/\u003e* This uses Broadcast Join.\u003cbr/\u003e* When the table is small enough to fit into the memory of a single worker node, with some breathing room of course, we can optimize our join.\u003cbr/\u003e* replicate our small DataFrame onto every worker node in the cluster (be it located on one machine or many).\u003cbr/\u003e* Even it looks expensive initially, but this prevents us from performing the all-to-all communication during the entire join process.\u003cbr/\u003e* we perform it only once at the beginning and then let each individual worker node perform the work without having to wait or communicate with any other worker node.\u003cbr/\u003e* This means that joins will be performed on every single node individually, making CPU the biggest bottleneck.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"files/tables/BroadCast_Join-1b827.PNG\" alt\u003d\"Broad Cast Join\" /\u003e\u003c/p\u003e\n\u003cp\u003eFor our current set of data, we can see that Spark joining type by looking at the explain plan:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_544135769",
      "id": "20220919-163849_286871287",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%pyspark\njoinExpr \u003d person[\"graduate_program\"] \u003d\u003d graduateProgram[\"id\"]\nperson.join(graduateProgram, joinExpr).explain()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.673",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e\u003d\u003d Physical Plan \u003d\u003d\n*(3) SortMergeJoin [graduate_program#778L], [id#792L], Inner\n:- Sort [graduate_program#778L ASC NULLS FIRST], false, 0\n:  +- Exchange hashpartitioning(graduate_program#778L, 200)\n:     +- *(1) Project [_1#768L AS id#776L, _2#769 AS name#777, _3#770L AS graduate_program#778L, _4#771 AS spark_status#779]\n:        +- *(1) Filter isnotnull(_3#770L)\n:           +- *(1) Scan ExistingRDD[_1#768L,_2#769,_3#770L,_4#771]\n+- Sort [id#792L ASC NULLS FIRST], false, 0\n   +- Exchange hashpartitioning(id#792L, 200)\n      +- *(2) Project [_1#784L AS id#792L, _2#785 AS degree#793, _3#786 AS department#794, _4#787 AS school#795]\n         +- *(2) Filter isnotnull(_1#784L)\n            +- *(2) Scan ExistingRDD[_1#784L,_2#785,_3#786,_4#787]\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_1956769062",
      "id": "20220919-163849_188779942",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%md\nWith DataFrame API, we can also explicitly give the optimizer a hint that we would like to use a broadcast join by using the correct function around the small DataFrame in question.",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.673",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWith DataFrame API, we can also explicitly give the optimizer a hint that we would like to use a broadcast join by using the correct function around the small DataFrame in question.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_1406424853",
      "id": "20220919-163849_804094259",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql.functions import broadcast\n\njoinExpr \u003d person[\"graduate_program\"] \u003d\u003d graduateProgram[\"id\"]\nperson.join(broadcast(graduateProgram), joinExpr).explain()",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.673",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n\u003c/style\u003e\n\u003cdiv class\u003d\"ansiout\"\u003e\u003d\u003d Physical Plan \u003d\u003d\n*(2) BroadcastHashJoin [graduate_program#778L], [id#792L], Inner, BuildRight\n:- *(2) Project [_1#768L AS id#776L, _2#769 AS name#777, _3#770L AS graduate_program#778L, _4#771 AS spark_status#779]\n:  +- *(2) Filter isnotnull(_3#770L)\n:     +- *(2) Scan ExistingRDD[_1#768L,_2#769,_3#770L,_4#771]\n+- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]))\n   +- *(1) Project [_1#784L AS id#792L, _2#785 AS degree#793, _3#786 AS department#794, _4#787 AS school#795]\n      +- *(1) Filter isnotnull(_1#784L)\n         +- *(1) Scan ExistingRDD[_1#784L,_2#785,_3#786,_4#787]\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529673_510691822",
      "id": "20220919-163849_1530258046",
      "dateCreated": "2022-09-19 16:38:49.673",
      "status": "READY"
    },
    {
      "text": "%md\n* The SQL interface also includes the ability to provide hints to perform joins. \n* These are not enforced, however, so the optimizer might choose to ignore them.\n* We can set one of these hints by using a special comment syntax.\n    * MAPJOIN\n    * BROADCAST \u0026\n    * BROADCASTJOIN \n   \n   all do the same thing and are all supported",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 03:07:09.271",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003eThe SQL interface also includes the ability to provide hints to perform joins.\u003c/li\u003e\n  \u003cli\u003eThese are not enforced, however, so the optimizer might choose to ignore them.\u003c/li\u003e\n  \u003cli\u003eWe can set one of these hints by using a special comment syntax.\n    \u003cul\u003e\n      \u003cli\u003eMAPJOIN\u003c/li\u003e\n      \u003cli\u003eBROADCAST \u0026amp;\u003c/li\u003e\n      \u003cli\u003eBROADCASTJOIN\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eall do the same thing and are all supported\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529674_513999836",
      "id": "20220919-163849_545498746",
      "dateCreated": "2022-09-19 16:38:49.674",
      "status": "READY"
    },
    {
      "text": "%pyspark\n%sql\nSELECT /*+ MAPJOIN(graduateProgram) */ * FROM person JOIN graduateProgram\nON person.graduate_program \u003d graduateProgram.id",
      "user": "anonymous",
      "dateUpdated": "2022-09-19 16:38:49.674",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cstyle scoped\u003e\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n\u003c/style\u003e\u003cdiv class\u003d\u0027table-result-container\u0027\u003e\u003ctable class\u003d\u0027table-result\u0027\u003e\u003cthead style\u003d\u0027background-color: white\u0027\u003e\u003ctr\u003e\u003cth\u003eid\u003c/th\u003e\u003cth\u003ename\u003c/th\u003e\u003cth\u003egraduate_program\u003c/th\u003e\u003cth\u003espark_status\u003c/th\u003e\u003cth\u003eid\u003c/th\u003e\u003cth\u003edegree\u003c/th\u003e\u003cth\u003edepartment\u003c/th\u003e\u003cth\u003eschool\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e0\u003c/td\u003e\u003ctd\u003eBill Chambers\u003c/td\u003e\u003ctd\u003e0\u003c/td\u003e\u003ctd\u003eList(100)\u003c/td\u003e\u003ctd\u003e0\u003c/td\u003e\u003ctd\u003eMasters\u003c/td\u003e\u003ctd\u003eSchool of Information\u003c/td\u003e\u003ctd\u003eUC Berkeley\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003eMatei Zaharia\u003c/td\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003eList(500, 250, 100)\u003c/td\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003ePh.D.\u003c/td\u003e\u003ctd\u003eEECS\u003c/td\u003e\u003ctd\u003eUC Berkeley\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003ctd\u003eMichael Armbrust\u003c/td\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003eList(250, 100)\u003c/td\u003e\u003ctd\u003e1\u003c/td\u003e\u003ctd\u003ePh.D.\u003c/td\u003e\u003ctd\u003eEECS\u003c/td\u003e\u003ctd\u003eUC Berkeley\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529674_1256020381",
      "id": "20220919-163849_799089265",
      "dateCreated": "2022-09-19 16:38:49.674",
      "status": "READY"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 03:08:46.162",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1710904126162_1954847033",
      "id": "paragraph_1710904126162_1954847033",
      "dateCreated": "2024-03-20 03:08:46.162",
      "status": "READY"
    },
    {
      "text": "%md\nif you try to broadcast something too large, you can crash your driver node (because that collect is expensive).\n\n**Little table–to–little table:**\nWhen performing joins with small tables, it’s usually best to let Spark decide how to join them. You can always force a broadcast join if you’re noticing strange behavior.",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 03:08:31.054",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eif you try to broadcast something too large, you can crash your driver node (because that collect is expensive).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLittle table–to–little table:\u003c/strong\u003e\u003cbr/\u003eWhen performing joins with small tables, it’s usually best to let Spark decide how to join them. You can always force a broadcast join if you’re noticing strange behavior.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529674_1788665386",
      "id": "20220919-163849_1812384431",
      "dateCreated": "2022-09-19 16:38:49.674",
      "status": "READY"
    },
    {
      "text": "%md\n###### Conclusion:\nIt is important to consider is if you **partition** your data correctly prior to a join, you can end up with much more efficient execution because even if a shuffle is planned, if data from two different DataFrames is already located on the same machine, Spark can avoid the\nshuffle.\n\nThere are additional implications when you decide what order joins should occur in. Because some joins act as filters, this can be a low-hanging improvement in your workloads, as you are guaranteed to reduce data exchanged over the network.",
      "user": "anonymous",
      "dateUpdated": "2024-03-20 03:08:51.078",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch6\u003eConclusion:\u003c/h6\u003e\n\u003cp\u003eIt is important to consider is if you \u003cstrong\u003epartition\u003c/strong\u003e your data correctly prior to a join, you can end up with much more efficient execution because even if a shuffle is planned, if data from two different DataFrames is already located on the same machine, Spark can avoid the\u003cbr/\u003eshuffle.\u003c/p\u003e\n\u003cp\u003eThere are additional implications when you decide what order joins should occur in. Because some joins act as filters, this can be a low-hanging improvement in your workloads, as you are guaranteed to reduce data exchanged over the network.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1663605529674_1744370485",
      "id": "20220919-163849_416604995",
      "dateCreated": "2022-09-19 16:38:49.674",
      "status": "READY"
    }
  ],
  "name": "Chap 08- Joins",
  "id": "2HD81RW9D",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}